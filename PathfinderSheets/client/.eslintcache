[{"C:\\Users\\Matts PC\\workspace\\PathfinderSheets\\PathfinderSheets\\client\\src\\index.js":"1","C:\\Users\\Matts PC\\workspace\\PathfinderSheets\\PathfinderSheets\\client\\src\\App.js":"2","C:\\Users\\Matts PC\\workspace\\PathfinderSheets\\PathfinderSheets\\client\\src\\reportWebVitals.js":"3","C:\\Users\\Matts PC\\workspace\\PathfinderSheets\\PathfinderSheets\\client\\src\\components\\AppHeader.js":"4","C:\\Users\\Matts PC\\workspace\\PathfinderSheets\\PathfinderSheets\\client\\src\\providers\\UserProfileProvider.js":"5","C:\\Users\\Matts PC\\workspace\\PathfinderSheets\\PathfinderSheets\\client\\src\\components\\ApplicationViews.js":"6","C:\\Users\\Matts PC\\workspace\\PathfinderSheets\\PathfinderSheets\\client\\src\\pages\\Login.js":"7","C:\\Users\\Matts PC\\workspace\\PathfinderSheets\\PathfinderSheets\\client\\src\\pages\\Register.js":"8","C:\\Users\\Matts PC\\workspace\\PathfinderSheets\\PathfinderSheets\\client\\src\\pages\\Home.js":"9","C:\\Users\\Matts PC\\workspace\\PathfinderSheets\\PathfinderSheets\\client\\src\\components\\CharacterSheetList.js":"10","C:\\Users\\Matts PC\\workspace\\PathfinderSheets\\PathfinderSheets\\client\\src\\components\\CharacterSheetForm.js":"11","C:\\Users\\Matts PC\\workspace\\PathfinderSheets\\PathfinderSheets\\client\\src\\components\\Skills.js":"12","C:\\Users\\Matts PC\\workspace\\PathfinderSheets\\PathfinderSheets\\client\\src\\components\\Attributes.js":"13","C:\\Users\\Matts PC\\workspace\\PathfinderSheets\\PathfinderSheets\\client\\src\\pages\\CharacterSheetDetails.js":"14"},{"size":647,"mtime":1611957577129,"results":"15","hashOfConfig":"16"},{"size":502,"mtime":1611958723143,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"16"},{"size":2509,"mtime":1612551932205,"results":"19","hashOfConfig":"16"},{"size":3087,"mtime":1611959255418,"results":"20","hashOfConfig":"16"},{"size":1107,"mtime":1612475947433,"results":"21","hashOfConfig":"16"},{"size":2084,"mtime":1612475402145,"results":"22","hashOfConfig":"16"},{"size":3664,"mtime":1612304387631,"results":"23","hashOfConfig":"16"},{"size":961,"mtime":1612551932208,"results":"24","hashOfConfig":"16"},{"size":988,"mtime":1612551932207,"results":"25","hashOfConfig":"16"},{"size":16116,"mtime":1612551932205,"results":"26","hashOfConfig":"16"},{"size":1908,"mtime":1612475947443,"results":"27","hashOfConfig":"16"},{"size":1099,"mtime":1612475947435,"results":"28","hashOfConfig":"16"},{"size":17977,"mtime":1612551932208,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"yrcfff",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"32"},"C:\\Users\\Matts PC\\workspace\\PathfinderSheets\\PathfinderSheets\\client\\src\\index.js",[],["64","65"],"C:\\Users\\Matts PC\\workspace\\PathfinderSheets\\PathfinderSheets\\client\\src\\App.js",[],"C:\\Users\\Matts PC\\workspace\\PathfinderSheets\\PathfinderSheets\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Matts PC\\workspace\\PathfinderSheets\\PathfinderSheets\\client\\src\\components\\AppHeader.js",[],"C:\\Users\\Matts PC\\workspace\\PathfinderSheets\\PathfinderSheets\\client\\src\\providers\\UserProfileProvider.js",[],"C:\\Users\\Matts PC\\workspace\\PathfinderSheets\\PathfinderSheets\\client\\src\\components\\ApplicationViews.js",[],"C:\\Users\\Matts PC\\workspace\\PathfinderSheets\\PathfinderSheets\\client\\src\\pages\\Login.js",[],"C:\\Users\\Matts PC\\workspace\\PathfinderSheets\\PathfinderSheets\\client\\src\\pages\\Register.js",[],"C:\\Users\\Matts PC\\workspace\\PathfinderSheets\\PathfinderSheets\\client\\src\\pages\\Home.js",["66"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport CharacterSheetList from \"../components/CharacterSheetList\";\r\nimport { UserProfileContext } from \"../providers/UserProfileProvider\";\r\n\r\nconst Home = () => {\r\n    const [sheets, setSheets] = useState([]);\r\n    const { getToken } = useContext(UserProfileContext);\r\n\r\n    useEffect(() => {\r\n      getToken()\r\n      .then((token) =>\r\n        fetch(\"/api/charactersheet\", {\r\n          method: \"GET\",\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          },\r\n        })\r\n        .then((res) => res.json())\r\n        .then((sheets) => {\r\n            setSheets(sheets);\r\n        }));\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"column\">\r\n          <div className=\"row\">\r\n            <div className=\"col-lg-10 col-xs-12\">\r\n              <CharacterSheetList sheets={sheets} />\r\n            </div>\r\n          </div>\r\n        </div >\r\n      );\r\n}\r\nexport default Home;","C:\\Users\\Matts PC\\workspace\\PathfinderSheets\\PathfinderSheets\\client\\src\\components\\CharacterSheetList.js",["67"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, CardBody, CardImg, CardText, CardTitle, Col, Row } from \"reactstrap\";\r\n\r\nconst CharacterSheetList = ({sheets}) => {\r\n  console.log(sheets)\r\n    return (\r\n      <Row>\r\n      {sheets.map((sheet) => {\r\n           return (\r\n             <Col md={3}>\r\n            <Link to={`/charactersheet/${sheet.characterSheet.id}`}>\r\n              <Card>\r\n                <CardImg top width=\"100%\" src={sheet.characterSheet.characterPicture} alt={sheet.characterSheet.characterName} />\r\n                <CardBody>\r\n                  <CardTitle tag=\"h5\">{sheet.characterSheet.characterName}</CardTitle>\r\n                  <CardText tag=\"h6\">Level {sheet.characterSheet.characterLevel} {sheet.race.raceName} {sheet.class.className}</CardText>\r\n                </CardBody>\r\n              </Card>\r\n            </Link>\r\n            </Col>\r\n          );\r\n      })}\r\n      </Row>\r\n    );\r\n};\r\nexport default CharacterSheetList;","C:\\Users\\Matts PC\\workspace\\PathfinderSheets\\PathfinderSheets\\client\\src\\components\\CharacterSheetForm.js",[],"C:\\Users\\Matts PC\\workspace\\PathfinderSheets\\PathfinderSheets\\client\\src\\components\\Skills.js",["68"],"import React, { useState } from 'react';\r\nimport { Col, Input, Label, Row } from 'reactstrap';\r\n\r\nconst Skills = ({skill, handleChange}) => {\r\n\r\n    return (\r\n        <>\r\n            <Col md={{offset:2}}>\r\n                <Row>\r\n                        <Label md={2}>{skill}</Label>\r\n                    <Col md={2}>\r\n                        <Input name={`${skill}`} id={`${skill}`} onChange={((e) => handleChange(e))}/>\r\n                    </Col> +\r\n                    <Col md={2}>\r\n                        <Input readOnly value />\r\n                    </Col> =\r\n                    <Col md={2}>\r\n                        <Input readOnly value />\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n            <br></br>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skills;","C:\\Users\\Matts PC\\workspace\\PathfinderSheets\\PathfinderSheets\\client\\src\\components\\Attributes.js",["69"],"import React from 'react';\r\nimport { Col, Input, Label, Row } from 'reactstrap';\r\n\r\nconst Attributes = ({attribute, handleChange, sheet}) => {\r\n\r\n    return (\r\n        <>\r\n            <Col md={{offset:2}}>\r\n                <Row>\r\n                        <Label md={2}>{attribute}</Label>\r\n                    <Col md={2}>\r\n                        <Input name={`${attribute}`} id={`${attribute}`} onChange={((e) => handleChange(e))}/>\r\n                    </Col> Mod\r\n                    <Col md={2}>\r\n                        <Input readOnly value={Math.floor((sheet[attribute] - 10) / 2)} />\r\n                    </Col> Temp\r\n                    <Col md={2}>\r\n                        <Input name={`${attribute}Temp`} id={`${attribute}Temp`} onChange={((e) => handleChange(e))}/>\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n            <br></br>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Attributes;","C:\\Users\\Matts PC\\workspace\\PathfinderSheets\\PathfinderSheets\\client\\src\\pages\\CharacterSheetDetails.js",["70"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { Col, Form, FormGroup, Input, Label, Row } from 'reactstrap';\r\nimport Attributes from \"../components/Attributes\";\r\nimport Skills from \"../components/Skills\";\r\nimport { UserProfileContext } from \"../providers/UserProfileProvider\";\r\n\r\nconst CharacterSheetDetails = () => {\r\n\r\n    const [sheet, setSheet] = useState({});\r\n    const [alignments, setAlignments] = useState([]);\r\n    const [classes, setClasses] = useState([]);\r\n    const [races, setRaces] = useState([]);\r\n\r\n    const { id } = useParams();\r\n\r\n    const { getToken, getCurrentUser } = useContext(UserProfileContext);\r\n\r\n    const user = getCurrentUser();\r\n\r\n    const history = useHistory();\r\n\r\n    \r\n    const getAlignments = () => {\r\n        fetch('/api/alignment')\r\n        .then(res => res.json())\r\n        .then(res => setAlignments(res))\r\n    };\r\n\r\n    const getClasses = () => {\r\n        fetch('/api/class')\r\n        .then(res => res.json())\r\n        .then(res => setClasses(res))\r\n    };\r\n\r\n    const getRaces = () => {\r\n        fetch('/api/race')\r\n        .then(res => res.json())\r\n        .then(res => setRaces(res))\r\n    };\r\n\r\n    const skillArray = [\"Acrobatics\", \"Appraise\", \"Bluff\", \"Climb\", \"Craft\", \"Diplomacy\", \"Disable Device\", \"Escape Artist\", \"Fly\", \"Handle Animal\", \"Heal\", \"Intimidate\",\r\n                        \"Knowledge(Arcana)\", \"Knowledge(Dungeoneering)\", \"Knowledge(Engineering)\", \"Knowledge(Geography)\", \"Knowledge(History)\", \"Knowledge(Local)\", \"Knowledge(Nature)\",\r\n                        \"Knowledge(Nobility)\", \"Knowledge(Planes)\", \"Knowledge(Religion)\", \"Linguistics\", \"Perception\", \"Perform\", \"Profession\", \"Ride\", \"Sense Motive\", \"Sleight of Hand\",\r\n                        \"Spellcraft\", \"Stealth\", \"Survival\", \"Swim\", \"Use Magic Device\"];\r\n\r\n    const attributeArray = [\"Strength\", \"Dexterity\", \"Constitution\", \"Intelligence\", \"Wisdom\", \"Charisma\"]\r\n\r\n    const handleChange = (e) => {\r\n        const newSheet = {...sheet};\r\n        newSheet[e.target.name] = e.target.value;\r\n        setSheet(newSheet);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getAlignments();\r\n        getClasses();\r\n        getRaces();\r\n        getToken()\r\n        .then((token) => {\r\n            console.log(id)\r\n            fetch(`/api/charactersheet/${id}`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            })\r\n            .then((res) => res.json())\r\n            .then((sheet) => {\r\n                setSheet(sheet);\r\n                console.log(sheet)\r\n            });\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <Form>\r\n            <Row>\r\n            <Col md={4}>\r\n                <div>Pathfinder Picture</div>\r\n            </Col>\r\n            <Col md={8}>\r\n                 <Row>\r\n                     <Col md={4}>\r\n                         <FormGroup>\r\n                             <Label>Character Name</Label>\r\n                             <Input name=\"characterName\" defaultValue={sheet.characterName} onChange={((e) => handleChange(e))}/>\r\n                         </FormGroup>\r\n                     </Col>\r\n                     <Col md={4}>\r\n                         <FormGroup>\r\n                             <Label>Alignment</Label>\r\n                             <Input type=\"select\" name=\"alignmentId\" onChange={((e) => handleChange(e))}>\r\n                                 <option disabled hidden>Select an Alignment</option>\r\n                                 {alignments.map((alignment) => (\r\n                                     <option value={alignment.id} key={alignment.id} selected={sheet.alignmentId === alignment.id} >\r\n                                         {alignment.alignmentName}\r\n                                     </option>\r\n                                 ))}\r\n                              </Input>                                \r\n                         </FormGroup>\r\n                         </Col>\r\n                         <Col md={4}>\r\n                         <FormGroup>\r\n                             <Label>Player Name</Label>\r\n                             <Input readOnly value={user.displayName}/>\r\n                         </FormGroup>\r\n                         </Col>\r\n                 </Row>\r\n                 <Row>\r\n                     <Col md={5}>\r\n                         <Label>Class</Label>\r\n                         <Input type=\"select\" name=\"classId\" onChange={((e) => handleChange(e))}>\r\n                                 <option disabled hidden>Select a Class</option>\r\n                                 {classes.map((classx) => (\r\n                                     <option value={classx.id} key={classx.id}  selected={sheet.classId === classx.id}>\r\n                                         {classx.className}\r\n                                     </option>\r\n                                 ))}\r\n                              </Input>\r\n                     </Col>\r\n                     <Col md={1}>\r\n                         <Label>Level</Label>\r\n                         <Input type=\"select\" name=\"characterLevel\" onChange={((e) => handleChange(e))} >\r\n                            <option selected={sheet.characterLevel === 1}>1</option>\r\n                            <option selected={sheet.characterLevel === 2}>2</option>\r\n                            <option selected={sheet.characterLevel === 3}>3</option>\r\n                            <option selected={sheet.characterLevel === 4}>4</option>\r\n                            <option selected={sheet.characterLevel === 5}>5</option>\r\n                            <option selected={sheet.characterLevel === 6}>6</option>\r\n                            <option selected={sheet.characterLevel === 7}>7</option>\r\n                            <option selected={sheet.characterLevel === 8}>8</option>\r\n                            <option selected={sheet.characterLevel === 9}>9</option>\r\n                            <option selected={sheet.characterLevel === 10}>10</option>\r\n                            <option selected={sheet.characterLevel === 11}>11</option>\r\n                            <option selected={sheet.characterLevel === 12}>12</option>\r\n                            <option selected={sheet.characterLevel === 13}>13</option>\r\n                            <option selected={sheet.characterLevel === 14}>14</option>\r\n                            <option selected={sheet.characterLevel === 15}>15</option>\r\n                            <option selected={sheet.characterLevel === 16}>16</option>\r\n                            <option selected={sheet.characterLevel === 17}>17</option>\r\n                            <option selected={sheet.characterLevel === 18}>18</option>\r\n                            <option selected={sheet.characterLevel === 19}>19</option>\r\n                            <option selected={sheet.characterLevel === 20}>20</option>\r\n                            </Input>\r\n                     </Col>\r\n                     <Col md={3}>\r\n                         <Label>Deity</Label>\r\n                         <Input name=\"deity\" defaultValue={sheet.deity} onChange={((e) => handleChange(e))}/>\r\n                     </Col>\r\n                     <Col md={3}>\r\n                         <Label>Homeland</Label>\r\n                         <Input name=\"homeland\" defaultValue={sheet.homeland} onChange={((e) => handleChange(e))}/>\r\n                     </Col>\r\n                 </Row>\r\n                 <Row>\r\n                     <Col md={3}>\r\n                         <Label>Race</Label>\r\n                         <Input type=\"select\" name=\"raceId\" defaultValue={sheet.raceId} onChange={((e) => handleChange(e))}>\r\n                                 <option disabled hidden>Select a Race</option>\r\n                                 {races.map((race) => (\r\n                                     <option value={race.id} key={race.id} selected={sheet.raceId === race.id}>\r\n                                         {race.raceName}\r\n                                     </option>\r\n                                 ))}\r\n                              </Input>  \r\n                     </Col>\r\n                     <Col md={3}>\r\n                         <Label>Size</Label>\r\n                         <Input name=\"size\" defaultValue={sheet.size} onChange={((e) => handleChange(e))}/>\r\n                     </Col>\r\n                     <Col md={1}>\r\n                         <Label>Gender</Label>\r\n                         <Input name=\"gender\" defaultValue={sheet.gender} onChange={((e) => handleChange(e))}/>\r\n                     </Col>\r\n                     <Col md={1}>\r\n                         <Label>Age</Label>\r\n                         <Input name=\"age\" defaultValue={sheet.age} onChange={((e) => handleChange(e))}/>\r\n                     </Col>\r\n                     <Col md={1}>\r\n                         <Label>Height</Label>\r\n                         <Input name=\"height\" defaultValue={sheet.height} onChange={((e) => handleChange(e))}/>\r\n                     </Col>\r\n                     <Col md={1}>\r\n                         <Label>Weight</Label>\r\n                         <Input name=\"weight\" defaultValue={sheet.weight} onChange={((e) => handleChange(e))}/>\r\n                     </Col>\r\n                     <Col md={1}>\r\n                         <Label>Hair</Label>\r\n                         <Input name=\"hair\" defaultValue={sheet.hair} onChange={((e) => handleChange(e))}/>\r\n                     </Col>\r\n                     <Col md={1}>\r\n                         <Label>Eyes</Label>\r\n                         <Input name=\"eyes\" defaultValue={sheet.eyes} onChange={((e) => handleChange(e))}/>\r\n                     </Col>\r\n                 </Row>\r\n            </Col>\r\n            </Row>\r\n            <br></br>\r\n            <Row>\r\n                <Col md={6}>\r\n                        <h1>Attributes</h1>\r\n                            {attributeArray.map(attribute => <Attributes key={attribute} attribute={attribute} handleChange={handleChange} sheet={sheet} />)}\r\n                            <h1>Health</h1>\r\n                    <Row>\r\n                        <Col md={{size:2,offset:4}}>\r\n                        <Label>Current</Label>\r\n                        <Input name=\"currentHealth\" defaultValue={sheet.currentHealth} onChange={((e) => handleChange(e))}/>\r\n                        </Col>\r\n                        <Col md={2}>\r\n                        <Label>Maximum</Label>\r\n                        <Input name=\"maximumHealth\" defaultValue={sheet.maximumHealth} onChange={((e) => handleChange(e))}/>\r\n                        </Col>\r\n                    </Row>\r\n                    <br></br>\r\n                        <h1>Saves</h1>\r\n                        <Row>\r\n                            <Col md={{size:2, offset:3}}>\r\n                                <Label>Fortitude</Label>\r\n                                <Input name=\"fortitude\" defaultValue={sheet.fortitude} onChange={((e) => handleChange(e))}/>\r\n                            </Col>\r\n                            <Col md={2}>\r\n                                <Label>Reflex</Label>\r\n                                <Input name=\"reflex\" defaultValue={sheet.reflex} onChange={((e) => handleChange(e))}/>\r\n                            </Col>\r\n                            <Col md={2}>\r\n                                <Label>Will</Label>\r\n                                <Input name=\"will\" defaultValue={sheet.will} onChange={((e) => handleChange(e))}/>\r\n                            </Col>\r\n                        </Row>                        \r\n                    <br></br>\r\n                        <h1>Defenses</h1>\r\n                        <Row>\r\n                            <Col md={{size:2, offset:1}}>\r\n                                <Label>Armor Class</Label>\r\n                                <Input name=\"armorClass\" defaultValue={sheet.armorClass} onChange={((e) => handleChange(e))}/>\r\n                            </Col>\r\n                            <Col md={2}>\r\n                                <Label>Touch AC</Label>\r\n                                <Input name=\"touchAC\" defaultValue={sheet.touchAC} onChange={((e) => handleChange(e))}/>\r\n                            </Col>\r\n                            <Col md={2}>\r\n                                <Label>Flat-Footed AC</Label>\r\n                                <Input name=\"flatFootedAC\" defaultValue={sheet.flatFootedAC} onChange={((e) => handleChange(e))}/>\r\n                            </Col>\r\n                            <Col md={2}>\r\n                                <Label>Spell Resistance</Label>\r\n                                <Input name=\"spellResistance\" defaultValue={sheet.spellResistance} onChange={((e) => handleChange(e))}/>\r\n                            </Col>\r\n                            <Col md={2}>\r\n                                <Label>CMD</Label>\r\n                                <Input name=\"cMDefense\" defaultValue={sheet.cMDefense} onChange={((e) => handleChange(e))}/>\r\n                            </Col>\r\n                        </Row>\r\n                        <br></br>\r\n                        <h1>Combat</h1>\r\n                        <Row>\r\n                            <Col md={{size:2, offset:1}}>\r\n                                <Label>Inititiative</Label>\r\n                                <Input name=\"inititiative\" defaultValue={sheet.inititiative} onChange={((e) => handleChange(e))}/>\r\n                            </Col>\r\n                            <Col md={2}>\r\n                                <Label>Basic Attack Bonus</Label>\r\n                                <Input name=\"basicAttackBonus\" defaultValue={sheet.basicAttackBonus} onChange={((e) => handleChange(e))}/>\r\n                            </Col>\r\n                            <Col md={2}>\r\n                                <Label>Melee</Label>\r\n                                <Input name=\"melee\" defaultValue={sheet.melee} onChange={((e) => handleChange(e))}/>\r\n                            </Col>\r\n                            <Col md={2}>\r\n                                <Label>Ranged</Label>\r\n                                <Input name=\"ranged\" defaultValue={sheet.ranged} onChange={((e) => handleChange(e))}/>\r\n                            </Col>\r\n                            <Col md={2}>\r\n                                <Label>CMB</Label>\r\n                                <Input name=\"cMBouns\" defaultValue={sheet.cMBonus} onChange={((e) => handleChange(e))}/>\r\n                            </Col>\r\n                        </Row>\r\n                        <br></br>\r\n                        <h1>Speed</h1>\r\n                        <Row>\r\n                            <Col md={{size:2, offset:1}}>\r\n                                <Label>Land</Label>\r\n                                <Input name=\"landSpeed\" defaultValue={sheet.landSpeed} onChange={((e) => handleChange(e))}/>\r\n                            </Col>\r\n                            <Col md={2}>\r\n                                <Label>Run</Label>\r\n                                <Input readOnly value={Math.floor(sheet.landSpeed * 4)} />\r\n                            </Col>\r\n                            <Col md={2}>\r\n                                <Label>Climb</Label>\r\n                                <Input name=\"climbSpeed\" defaultValue={sheet.climbSpeed} onChange={((e) => handleChange(e))}/>\r\n                            </Col>\r\n                            <Col md={2}>\r\n                                <Label>Swim</Label>\r\n                                <Input name=\"swimSpeed\" defaultValue={sheet.swimSpeed} onChange={((e) => handleChange(e))}/>\r\n                            </Col>\r\n                            <Col md={2}>\r\n                                <Label>Fly</Label>\r\n                                <Input name=\"flySpeed\" defaultValue={sheet.flySpeed} onChange={((e) => handleChange(e))}/>\r\n                            </Col>\r\n                        </Row>\r\n                        <br></br>\r\n                        <h1>Equipment</h1>\r\n                        <Row>\r\n                        <Col md={{size:5, offset:1}}>\r\n                            <Label>Weapons</Label>\r\n                            <Input rows=\"5\" type=\"textarea\" name=\"weapon\" defaultValue={sheet.weapon} onChange={((e) => handleChange(e))}/>\r\n                        </Col>\r\n                        <Col md={5}>\r\n                            <Label>Armor</Label>\r\n                            <Input rows=\"5\" type=\"textarea\" name=\"armor\" defaultValue={sheet.armor} onChange={((e) => handleChange(e))}/>\r\n                        </Col>\r\n                        </Row>\r\n                        <br></br>\r\n                        <Row>\r\n                            <Col md={{size:10, offset:1}}>\r\n                                <h1>Inventory</h1>\r\n                                <Input rows=\"10\" type=\"textarea\" name=\"inventory\" defaultValue={sheet.inventory} onChange={((e) => handleChange(e))}/>\r\n                            </Col>\r\n                        </Row>\r\n                </Col>\r\n                    <Col md={6}>\r\n                        <h1>Skills</h1>\r\n                            {skillArray.map(skill => <Skills key={skill} skill={skill} sheet={sheet} handleChange={handleChange} />)}\r\n                            <br></br>\r\n                        <Row>\r\n                        <Col md={{size:2, offset:4}}>\r\n                            <Label>Skill Points Used</Label>\r\n                            <Input readOnly value />\r\n                        </Col>\r\n                        <Col md={2}>\r\n                            <Label>Total Skill Points</Label>\r\n                            <Input readOnly value />\r\n                        </Col>\r\n                        </Row>\r\n                        <br></br>\r\n                    </Col>\r\n                   \r\n            </Row>       \r\n        </Form>\r\n    )\r\n};\r\nexport default CharacterSheetDetails;",{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":11,"column":8,"nodeType":"77","endLine":11,"endColumn":10,"suggestions":"78"},{"ruleId":"79","severity":1,"message":"80","line":3,"column":105,"nodeType":"81","messageId":"82","endLine":3,"endColumn":116},{"ruleId":"79","severity":1,"message":"83","line":1,"column":17,"nodeType":"81","messageId":"82","endLine":1,"endColumn":25},{"ruleId":"79","severity":1,"message":"84","line":1,"column":10,"nodeType":"81","messageId":"82","endLine":1,"endColumn":30},{"ruleId":"75","severity":1,"message":"85","line":91,"column":8,"nodeType":"77","endLine":91,"endColumn":10,"suggestions":"86"},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCharacterSheets'. Either include it or remove the dependency array.","ArrayExpression",["89"],"no-unused-vars","'ModalHeader' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'getDefaultNormalizer' is defined but never used.","React Hook useEffect has a missing dependency: 'getCharacterSheetById'. Either include it or remove the dependency array.",["90"],"no-global-assign","no-unsafe-negation",{"desc":"91","fix":"92"},{"desc":"93","fix":"94"},"Update the dependencies array to be: [getCharacterSheets]",{"range":"95","text":"96"},"Update the dependencies array to be: [getCharacterSheetById]",{"range":"97","text":"98"},[394,396],"[getCharacterSheets]",[3264,3266],"[getCharacterSheetById]"]